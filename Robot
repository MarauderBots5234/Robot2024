package frc.robot;

import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.VictorSPXControlMode;
import com.ctre.phoenix.motorcontrol.can.VictorSPX;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkBase.IdleMode;
import com.revrobotics.CANSparkLowLevel.MotorType;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.drive.MecanumDrive;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.cameraserver.CameraServer;

import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj2.command.PIDCommand;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.SPI;


public class Robot extends TimedRobot {
  /*
   * Autonomous selection options.
   */
  private static final String kNothingAuto = "do nothing";
  private static final String kLaunchAndDrive = "launch drive";
  private static final String kLaunch = "launch";
  private static final String kDrive = "drive";
  private String m_autoSelected;
  private final SendableChooser<String> m_chooser = new SendableChooser<>();
  
  /*
   * Drive motor controller instances.
   *
   * Change the id's to match your robot.
   * Change kBrushed to kBrushless if you are uisng NEOs.
   * The rookie kit comes with CIMs which are brushed motors.
   * Use the appropriate other class if you are using different controllers.
   */
  CANSparkMax leftRear = new CANSparkMax(6, MotorType.kBrushless);
  CANSparkMax leftFront = new CANSparkMax(1, MotorType.kBrushless);
  CANSparkMax rightRear = new CANSparkMax(3, MotorType.kBrushless);
  CANSparkMax rightFront = new CANSparkMax(5, MotorType.kBrushless);

  /*
   * A class provided to control your drivetrain. Different drive styles can be passed to differential drive:
   * https://github.com/wpilibsuite/allwpilib/blob/main/wpilibj/src/main/java/edu/wpi/first/wpilibj/drive/DifferentialDrive.java
   */
  MecanumDrive m_drivetrain; 

  /*
   * Launcher motor controller instances.
   *
   * Like the drive motors, set the CAN id's to match your robot or use different
   * motor controller classses (VictorSPX) to match your robot as necessary.
   *
   * Both of the motors used on the KitBot launcher are CIMs which are brushed motors
   */
  //CANSparkMax m_launchWheel = new CANSparkMax(8, MotorType.kBrushless); // this if for shooting dont forget to label and give id 
  CANSparkMax m_feedWheel = new CANSparkMax(2, MotorType.kBrushless); // this if for intake dont for get to label and give id

  /**
   * Roller Claw motor controller instance.
  */
  VictorSPX m_rollerClaw = new VictorSPX(0); // this if for roller claw 
  VictorSPX m_rollerClaw2 = new VictorSPX(1);
  /**
   * Climber motor controller instance. In the stock Everybot configuration a
   * NEO is used, replace with kBrushed if using a brushed motor.
   */
  CANSparkMax m_climberL = new CANSparkMax(8, MotorType.kBrushless); // dont know what motor 3004 is using for its climber
  CANSparkMax m_climberR = new CANSparkMax(4, MotorType.kBrushless); // dont know what motor 3004 is using for its climber

    /**
   * The starter code uses the most generic joystick class.
   *
   * To determine which button on your controller corresponds to which number, open the FRC
   * driver station, go to the USB tab, plug in a controller and see which button lights up
   * when pressed down*
   *
   * Buttons index from 0
   */
  Joystick m_driverController = new Joystick(0);      // Need help with this part button mapping confusion


  Joystick m_manipController = new Joystick(1); // two drivers this season


  // --------------- Magic numbers. Use these to adjust settings. ---------------

 /**
   * How many amps can an individual drivetrain motor use.
   */
  static final int DRIVE_CURRENT_LIMIT_A = 60; // 

  /**
   * How many amps the feeder motor can use.
   */
  static final int FEEDER_CURRENT_LIMIT_A = 60;

  /**
   * Percent output to run the feeder when expelling note
   */
  static final double FEEDER_OUT_SPEED = 1.0;

  /**
   * Percent output to run the feeder when intaking note
   */
  static final double FEEDER_IN_SPEED = -.4;

  /**
   * Percent output for amp or drop note, configure based on polycarb bend
   */
  static final double FEEDER_AMP_SPEED = .4;

  /**
   * How many amps the launcher motor can use.
   *
   * In our testing we favored the CIM over NEO, if using a NEO lower this to 60 !!!
   */
  static final int LAUNCHER_CURRENT_LIMIT_A = 80;

  /**
   * Percent output to run the launcher when intaking AND expelling note
   */
  static final double LAUNCHER_SPEED = 1.0;

  /**
   * Percent output for scoring in amp or dropping note, configure based on polycarb bend
   * .14 works well with no bend from our testing
   */
  static final double LAUNCHER_AMP_SPEED = .17; // .17 is default
  /**
   * Percent output for the roller claw // THIS IS FOR CLAW WILL DO WHEN CLAW IS DONE
   */
  static final double CLAW_OUTPUT_POWER = .25;
  /**]
   * Percent output to help retain notes in the claw
   */
  static final double CLAW_STALL_POWER = .1;
  /**
   * Percent output to power the climber
   */
  static final double CLIMER_OUTPUT_POWER = 1;

  /**
   * This function is run when the robot is first started up and should be used for any
   * initialization code.
   */
  @Override
  public void robotInit() {
    m_chooser.setDefaultOption("do nothing", kNothingAuto);
    m_chooser.addOption("launch note and drive", kLaunchAndDrive);
    m_chooser.addOption("launch", kLaunch);
    m_chooser.addOption("drive", kDrive);
    SmartDashboard.putData("Auto choices", m_chooser);    // might add to main code need to see what it does

    // CameraServer.startAutomaticCapture();

    /*
     * Apply the current limit to the drivetrain motors
     */
    leftRear.setSmartCurrentLimit(DRIVE_CURRENT_LIMIT_A);         // this would be left and right motor for us dont know what current limit means
    leftFront.setSmartCurrentLimit(DRIVE_CURRENT_LIMIT_A);
    rightRear.setSmartCurrentLimit(DRIVE_CURRENT_LIMIT_A);
    rightFront.setSmartCurrentLimit(DRIVE_CURRENT_LIMIT_A);

    /*
     * Tells the rear wheels to follow the same commands as the front wheels
     */
    leftRear.follow(leftFront);                                 // potentially add this to the main code
    rightRear.follow(rightFront);

    /*
     * One side of the drivetrain must be inverted, as the motors are facing opposite directions
     */
    leftFront.setInverted(true);
    rightFront.setInverted(false);                                        // see if I need to add this

    m_drivetrain = new MecanumDrive(leftFront, rightFront, leftRear, rightRear);

    /*
     * Launcher wheel(s) spinning the wrong direction? Change to true here.     // incase its wrong direction
     *
     * Add white tape to wheel to help determine spin direction.
     */
    m_feedWheel.setInverted(true);                                      
    // m_launchWheel.setInverted(true);TODO: bing ths back when motor exists

    /*
     * Apply the current limit to the launching mechanism
     */
    m_feedWheel.setSmartCurrentLimit(FEEDER_CURRENT_LIMIT_A);
    // m_launchWheel.setSmartCurrentLimit(LAUNCHER_CURRENT_LIMIT_A);TODO: bing ths back when motor exists


    /*
     * Inverting and current limiting for roller claw and climber
     */
    m_rollerClaw.setInverted(false);
    m_rollerClaw2.setInverted(false);
    m_climberL.setInverted(false);
    m_climberR.setInverted(false);

    // m_rollerClaw.setSmartCurrentLimit(60);
    m_climberL.setSmartCurrentLimit(60);               // do this when climber and roller claw work
    m_climberR.setSmartCurrentLimit(60);               // do this when climber and roller claw work

    m_rollerClaw2.follow(m_rollerClaw);
    
    /*
     * Motors can be set to idle in brake or coast mode.
     * 
     * Brake mode is best for these mechanisms
     */
    m_rollerClaw.setNeutralMode(NeutralMode.Brake);
    m_rollerClaw2.setNeutralMode(NeutralMode.Brake);
    m_climberL.setIdleMode(IdleMode.kBrake);
    m_climberR.setIdleMode(IdleMode.kBrake);
  }

  /**
   * This function is called every 20 ms, no matter the mode. Use this for items like diagnostics
   * that you want ran during disabled, autonomous, teleoperated and test modes.
   */
  @Override
  public void robotPeriodic() {
    SmartDashboard.putNumber("Time (seconds)", Timer.getFPGATimestamp());
  }


  /*
   * Auto constants, change values below in autonomousInit()for different autonomous behaviour
   *
   * A delayed action starts X seconds into the autonomous period
   *
   * A time action will perform an action for X amount of seconds
   *
   * Speeds can be changed as desired and will be set to 0 when
   * performing an auto that does not require the system
   */
  double AUTO_LAUNCH_DELAY_S;
  double AUTO_DRIVE_DELAY_S;

  double AUTO_DRIVE_TIME_S;

  double AUTO_DRIVE_SPEED;
  double AUTO_LAUNCHER_SPEED;

  double autonomousStartTime;

  @Override
  public void autonomousInit() {
    m_autoSelected = m_chooser.getSelected();
    
    leftRear.setIdleMode(IdleMode.kBrake);
    leftFront.setIdleMode(IdleMode.kBrake);
    rightRear.setIdleMode(IdleMode.kBrake);
    rightFront.setIdleMode(IdleMode.kBrake);

    AUTO_LAUNCH_DELAY_S = 2;
    AUTO_DRIVE_DELAY_S = 3;

    AUTO_DRIVE_TIME_S = 2.0;
    AUTO_DRIVE_SPEED = -0.5;
    AUTO_LAUNCHER_SPEED = 1;
    
    /*
     * Depending on which auton is selected, speeds for the unwanted subsystems are set to 0
     * if they are not used for the selected auton
     *
     * For kDrive you can also change the kAutoDriveBackDelay
     */
    if(m_autoSelected == kLaunch)
    {
      AUTO_DRIVE_SPEED = 0;                   // I guess this changes autonomous speed
    }
    else if(m_autoSelected == kDrive)
    {
      AUTO_LAUNCHER_SPEED = 1;                          // Launcher speed
    }
    else if(m_autoSelected == kNothingAuto)
    {
      AUTO_DRIVE_SPEED = 0;                                   
      AUTO_LAUNCHER_SPEED = 0;
    }

    autonomousStartTime = Timer.getFPGATimestamp();
  }

  /** This function is called periodically during autonomous. */
  @Override
  public void autonomousPeriodic() {
    double timeElapsed = Timer.getFPGATimestamp() - autonomousStartTime;
    
    if(timeElapsed < AUTO_LAUNCH_DELAY_S)
    {
      m_feedWheel.set(-LAUNCHER_SPEED);
      // m_launchWheel.set(FEEDER_IN_SPEED);TODO: bing ths back when motor exists

      
      
      m_drivetrain.driveCartesian(0, 0, 0);
      //m_drivetrain.arcadeDrive(0, 0);

    }
    else if(timeElapsed < AUTO_DRIVE_DELAY_S)
    {
      m_feedWheel.set(AUTO_LAUNCHER_SPEED);
      
      
      
      m_drivetrain.driveCartesian(0, 0, 0);
      //m_drivetrain.arcadeDrive(0, 0, 0);
    }
    else if(timeElapsed < AUTO_DRIVE_DELAY_S + AUTO_DRIVE_TIME_S)
    {
      // m_launchWheel.set(1);TODO: bing ths back when motor exists

      m_feedWheel.set(1);
      m_drivetrain.driveCartesian(AUTO_DRIVE_SPEED, 0, 0);
      //m_drivetrain.arcadeDrive(0, 0, 0);
    }
    else
    {
      m_drivetrain.driveCartesian(0, 0, 0);
      //m_drivetrain.arcadeDrive(0, 0, 0);
    }
      

        
    }
    


    


    
    /* For an explanation on differintial drive, squaredInputs, arcade drive and tank drive see the bottom of this file */
  

  /** This function is called once when teleop is enabled. */
  @Override
  public void teleopInit() {
    /*
     * Motors can be set to idle in brake or coast mode.
     *
     * Brake mode effectively shorts the leads of the motor when not running, making it more
     * difficult to turn when not running.
     *
     * Coast doesn't apply any brake and allows the motor to spin down naturally with the robot's momentum.
     *
     * (touch the leads of a motor together and then spin the shaft with your fingers to feel the difference)
     *
     * This setting is driver preference. Try setting the idle modes below to kBrake to see the difference.
     */
    leftRear.setIdleMode(IdleMode.kBrake);
    leftFront.setIdleMode(IdleMode.kBrake);
    rightRear.setIdleMode(IdleMode.kBrake);             // dont know if we need coast
    rightFront.setIdleMode(IdleMode.kBrake);
  }

  /** This function is called periodically during operator control. */
  @Override
  public void teleopPeriodic() {

    /*
     * Spins up the launcher wheel
     */
    if (m_manipController.getRawButton(5)) { // left bumper
      m_feedWheel.set(LAUNCHER_SPEED);                    // need to see what rawbutton 1 is 
    }
    else if(m_manipController.getRawButton(6)) // spins up launcher wheel which is lb
    {
      m_feedWheel.set(-LAUNCHER_SPEED);
    } 
    else {
      m_feedWheel.set(0);
    }

    /*
     * Spins feeder wheel, wait for launch wheel to spin up to full speed for best results
     */
    // if (m_manipController.getRawButton(6)) // right bumper
    // {
    //   // m_launchWheel.set(FEEDER_OUT_SPEED);   TODO: bing ths back when motor exists
    //                  // need to see what raw button 6 is
    // }
    // else if(m_manipController.getRawButtonReleased(6))  //rb should outtake which is bottom wheel
    // {
    //   // m_launchWheel.set(0);
    // }

    /*
     * While the button is being held spin both motors to intake note
     */
    if(m_manipController.getRawButton(1))   // a
    {
      m_feedWheel.set(-LAUNCHER_SPEED);                                 // intake is 2 buttons
      // m_launchWheel.set(FEEDER_IN_SPEED);
    }
    else if(m_manipController.getRawButtonReleased(1)) // a; 1 for both motors
    {
      m_feedWheel.set(0);
      // m_launchWheel.set(0);
    }

    /*
     * While the amp button is being held, spin both motors to "spit" the note
     * out at a lower speed into the amp
     *
     * (this may take some driver practice to get working reliably)
     */
    if(m_manipController.getRawButton(2))         // b spins both motor to spit note out lower speed                           
    {
      // m_launchWheel.set(FEEDER_AMP_SPEED);
      m_feedWheel.set(LAUNCHER_AMP_SPEED);
    }
    else if(m_manipController.getRawButtonReleased(2)) // b
    {
      m_feedWheel.set(0);
      // m_launchWheel.set(0);
    }

    /**
     * Hold one of the two buttons to either intake or exjest note from roller claw
     * 
     * One button is positive claw power and the other is negative
     * 
     * It may be best to have the roller claw passively on throughout the match to 
     * better retain notes but we did not test this
     */ 
    if(m_manipController.getRawButton(3)) // x                               
    {
      m_rollerClaw.set(VictorSPXControlMode.PercentOutput, CLAW_OUTPUT_POWER);                                // roller claw button 4
    }
    else if(m_manipController.getRawButton(4)) // y
    {
      m_rollerClaw.set(VictorSPXControlMode.PercentOutput, -CLAW_OUTPUT_POWER);
    }
    else
    {
      m_rollerClaw.set(VictorSPXControlMode.PercentOutput, 0);
    }

    /**
     * POV is the D-PAD (directional pad) on your controller, 0 == UP and 180 == DOWN
     * 
     * After a match re-enable your robot and unspool the climb
     */
    if(m_manipController.getPOV() == 0)
    {
      m_climberL.set(1);    
      m_climberR.set(1);                                 // need logitech controller for this bot
    }
    else if(m_manipController.getPOV() == 180)
    {
      m_climberL.set(-1);
      m_climberR.set(-1);
    }
    else
    {
      m_climberL.set(0);
      m_climberR.set(0);
    }
  
    /*
     * Negative signs are here because the values from the analog sticks are backwards
     * from what we want. Pushing the stick forward returns a negative when we want a
     * positive value sent to the wheels.
     *
     * If you want to change the joystick axis used, open the driver station, go to the
     * USB tab, and push the sticks determine their axis numbers
     *
     * This was setup with a logitech controller, note there is a switch on the back of the
     * controller that changes how it functions
     */
    m_drivetrain.driveCartesian(m_driverController.getRawAxis(1), m_driverController.getRawAxis(XboxController.Axis.kRightX.value), m_driverController.getRawAxis(0));
    //m_drivetrain.arcadeDrive(-m_driverController.getRawAxis(1), -m_driverController.getRawAxis(0), false);
  }
    // TODO Make sure to make joysticks are not inverted
  @Override
  public void disabledPeriodic() {
    leftRear.set(0);
    leftFront.set(0);
    rightRear.set(0);
    rightFront.set(0);
    m_feedWheel.set(0);
    m_rollerClaw.set(VictorSPXControlMode.PercentOutput, 0);
    m_climberL.set(0);
    m_climberR.set(0);
  }
}

/*
 * The kit of parts drivetrain is known as differential drive, tank drive or skid-steer drive.
 *
 * There are two common ways to control this drivetrain: Arcade and Tank
 *
 * Arcade allows one stick to be pressed forward/backwards to power both sides of the drivetrain to move straight forwards/backwards.
 * A second stick (or the second axis of the same stick) can be pushed left/right to turn the robot in place.
 * When one stick is pushed forward and the other is pushed to the side, the robot will power the drivetrain
 * such that it both moves fowards and turns, turning in an arch.
 *
 * Tank drive allows a single stick to control of a single side of the robot.
 * Push the left stick forward to power the left side of the drive train, causing the robot to spin around to the right.
 * Push the right stick to power the motors on the right side.
 * Push both at equal distances to drive forwards/backwards and use at different speeds to turn in different arcs.
 * Push both sticks in opposite directions to spin in place.
 *
 * arcardeDrive can be replaced with tankDrive like so:
 *
 * m_drivetrain.tankDrive(-m_driverController.getRawAxis(1), -m_driverController.getRawAxis(5))
 *
 * Inputs can be squared which decreases the sensitivity of small drive inputs.
 *
 * It literally just takes (your inputs * your inputs), so a 50% (0.5) input from the controller becomes (0.5 * 0.5) -> 0.25
 *
 * This is an option that can be passed into arcade or tank drive:
 * arcadeDrive(double xSpeed, double zRotation, boolean squareInputs)
 *
 *
 * For more information see:
 * https://docs.wpilib.org/en/stable/docs/software/hardware-apis/motors/wpi-drive-classes.html
 *
 * https://github.com/wpilibsuite/allwpilib/blob/main/wpilibj/src/main/java/edu/wpi/first/wpilibj/drive/DifferentialDrive.java
 *
 */
